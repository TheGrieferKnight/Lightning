name: Publish

on:
  push:
    branches: main
  pull_request:
    branches: main

jobs:
  create-release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}
      release_body: ${{ steps.gitcliff.outputs.content }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0 # git-cliff needs history and tags

      - name: Setup Node
        uses: actions/setup-node@v5
        with:
          node-version: lts/*

      - name: Read package.json version
        id: version
        run: echo "PACKAGE_VERSION=$(node -p \"require('./package.json').version\")" >> "$GITHUB_ENV"

      # Generate changelog text with git-cliff (unreleased since last tag)
      - name: Generate release notes (git-cliff)
        id: gitcliff
        uses: orhun/git-cliff-action@v4
        with:
          # If you have a custom config file, change to .gitcliff.toml or cliff.toml
          config: .gitcliff.toml
          # --unreleased covers commits since the latest tag; strip header to make it a neat body
          args: -vv --unreleased --strip header
        env:
          OUTPUT: CHANGELOG.md # action also exposes outputs.content

      - name: Create draft release
        id: create-release
        uses: actions/github-script@v8
        with:
          script: |
            const version = process.env.PACKAGE_VERSION;
            const body = `.${'{'}{ steps.gitcliff.outputs.content }${'}'}`; // keep as string literal to avoid JS interpolation
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `v${version}`,
              name: `Lightning Desktop v${version}`,
              body,
              draft: true,
              prerelease: false,
            });
            return data.id;

  build-tauri:
    needs: create-release
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: windows-latest
            args: ""

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v5

      - name: Setup Node
        uses: actions/setup-node@v5
        with:
          node-version: lts/*

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - uses: oven-sh/setup-bun@v2

      - name: Install frontend dependencies
        run: bun install --force

      - name: Build and upload with tauri-action
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}
          args: ${{ matrix.args }}

  publish-release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    needs: [create-release, build-tauri]
    steps:
      - name: Publish release
        uses: actions/github-script@v7
        env:
          release_id: ${{ needs.create-release.outputs.release_id }}
        with:
          script: |
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: process.env.release_id,
              draft: false,
              prerelease: false,
            });
